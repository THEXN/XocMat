using Lagrange.XocMat.Extensions;
using SixLabors.Fonts;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.Drawing.Processing;
using SixLabors.ImageSharp.PixelFormats;
using SixLabors.ImageSharp.Processing;

namespace Lagrange.XocMat.Utility.Images;

public class MenuCell
{
    public string Text { get; set; }

    public string SmallText { get; set; }

    public Color Color { get; set; } = Color.Black;

    public bool UseColor { get; set; }

    private MenuGenerate MenuGenerate { get; set; } = new();

    public MenuCell(string text, string smallText)
    {
        Text = text;
        SmallText = smallText;
    }

    public MenuCell(string text, string smallText, Color color) : this(text, smallText)
    {
        Color = color;
        UseColor = true;
    }
}

public class MenuBuilder
{
    public List<MenuCell> MenuCells { get; set; } = new();

    private MenuGenerate _menuGenerate = new();

    public static MenuBuilder Create() => new();

    public MenuBuilder AddCell(string text, string description)
    {
        MenuCells.Add(new MenuCell(text, description));
        return this;
    }

    public MenuBuilder AddCell(params MenuCell[] cells)
    {
        MenuCells.AddRange(cells);
        return this;
    }

    public MenuBuilder SetFontSize(int fontSize)
    {
        _menuGenerate.FontSize = fontSize;
        return this;
    }

    public MenuBuilder SetSmallFontSize(int smallFontSize)
    {
        _menuGenerate.SmallFontSize = smallFontSize;
        return this;
    }

    public MenuBuilder SetCellSpaced(int cellSpaced)
    {
        _menuGenerate.CellSpaced = cellSpaced;
        return this;
    }

    public MenuBuilder SetCellWidth(int cellWidth)
    {
        _menuGenerate.CellWidth = cellWidth;
        return this;
    }

    public MenuBuilder SetMargin(int margin)
    {
        _menuGenerate.Margin = margin;
        return this;
    }

    public MenuBuilder SetTopMargin(int topMargin)
    {
        _menuGenerate.TopMargin = topMargin;
        return this;
    }

    public MenuBuilder SetTextCellSpacing(int textCellSpacing)
    {
        _menuGenerate.TextCellSpacing = textCellSpacing;
        return this;
    }

    public MenuBuilder SetLineMaxMenu(int lineMaxMenu)
    {
        _menuGenerate.LineMaxMenu = lineMaxMenu;
        return this;
    }

    public MenuBuilder SetAvatarSize(int avatarSize)
    {
        _menuGenerate.AvatarSize = avatarSize;
        return this;
    }

    public MenuBuilder SetAvatarTop(int avatarTop)
    {
        _menuGenerate.AvatarTop = avatarTop;
        return this;
    }

    public MenuBuilder SetAvatarBottom(int avatarBottom)
    {
        _menuGenerate.AvatarBottom = avatarBottom;
        return this;
    }

    public MenuBuilder SetMemberUin(uint memberUin)
    {
        _menuGenerate.MemberUin = memberUin;
        return this;
    }

    public MenuBuilder SetCardColor(Color cardColor)
    {
        _menuGenerate.CardColor = cardColor;
        return this;
    }

    public byte[] Build()
    {
        return _menuGenerate.DrawContent(this);
    }
}

public class MenuGenerate
{
    public string BackgroundPath => ImageUtils.GetRandOneBotBackground();

    public int FontSize { get; set; } = 36; //正常大小

    public int SmallFontSize { get; set; } = 20; //说明字体大小

    public int CellSpaced { get; set; } = 70; //单元与单元之间的间隔

    public int CellWidth { get; set; } = 400; //单元最大像素

    public int Margin { get; set; } = 100; //左右边距

    public int TopMargin { get; set; } = 50;

    public int TextCellSpacing { get; set; } = 20; //单元文字边距

    public int LineMaxMenu { get; set; } = 3; //一行最多几个

    public int AvatarSize { get; set; } = 200; //头像大小

    public int AvatarTop { get; set; } = 50; //头像距离顶部距离

    public int AvatarBottom { get; set; } = 50; //头像与底部距离

    public int CardPadding { get; set; } = 100; //背景卡片与图片边距

    public int CardTopPadding { get; set; } = 200;

    public string Signature { get; set; } = "Generated by Lagrange.XocMat";

    public int SignatureFontSize { get; set; } = 20;

    public uint MemberUin { get; set; } = 523321293;

    public Color CardColor { get; set; } = Color.FromRgba(255, 255, 255, 230);



    public (int Width, int Height) ComputeLayout(MenuBuilder builder)
    {
        var fontFamily = ImageUtils.GetFontFamily();
        var font = fontFamily.CreateFont(FontSize);
        var smallFont = fontFamily.CreateFont(SmallFontSize);
        var signatureFont = fontFamily.CreateFont(SignatureFontSize);

        int totalWidth = Margin * 2 + CellWidth * LineMaxMenu + TextCellSpacing * (LineMaxMenu - 1) + CardPadding * 2;
        int totalHeight = TopMargin * 2 + AvatarTop + AvatarSize + AvatarBottom + CellSpaced + CardTopPadding * 2; // 调整总高度，考虑头像的高度和间距

        int currentLineHeight = 0;
        int currentLineWidth = 0;
        int lineCount = 1;
        int cellCountInLine = 0;

        foreach (var cell in builder.MenuCells)
        {
            var textOptions = new TextOptions(font) { WrappingLength = CellWidth };
            var textSize = TextMeasurer.MeasureSize(cell.Text, textOptions);
            var smallTextOptions = new TextOptions(smallFont) { WrappingLength = CellWidth };
            var smallTextSize = TextMeasurer.MeasureSize(cell.SmallText, smallTextOptions);

            int cellHeight = (int)(textSize.Height + smallTextSize.Height) + TextCellSpacing * 2 + 8;
            int cellWidth = CellWidth + TextCellSpacing;

            if (cellCountInLine >= LineMaxMenu)
            {
                totalHeight += currentLineHeight + CellSpaced;
                currentLineHeight = cellHeight;
                currentLineWidth = cellWidth;
                cellCountInLine = 1;
                lineCount++;
            }
            else
            {
                currentLineHeight = Math.Max(currentLineHeight, cellHeight);
                currentLineWidth += cellWidth + TextCellSpacing;
                cellCountInLine++;
            }
        }

        totalHeight += currentLineHeight;

        // 添加签名的高度
        var signatureOptions = new TextOptions(signatureFont) { WrappingLength = totalWidth };
        var signatureSize = TextMeasurer.MeasureSize(Signature, signatureOptions);
        totalHeight += (int)signatureSize.Height + 60; // 60 是签名与单元格之间的距离

        return (totalWidth, totalHeight);
    }



    public byte[] DrawContent(MenuBuilder builder)
    {
        var (totalWidth, totalHeight) = ComputeLayout(builder);

        using var background = Image.Load<Rgba32>(BackgroundPath);
        using var image = background.Crop(totalWidth, totalHeight);

        var fontFamily = ImageUtils.GetFontFamily();
        var font = fontFamily.CreateFont(FontSize);
        var smallFont = fontFamily.CreateFont(SmallFontSize);
        var signatureFont = fontFamily.CreateFont(SignatureFontSize);

        int currentX = Margin + CardPadding;
        int currentY = TopMargin + AvatarTop + AvatarSize + AvatarBottom + CardTopPadding; // 调整Y坐标，使单元格在头像下方开始，并增加间距
        int currentLineHeight = 0;
        int cellCountInLine = 0;

        // 获取头像并绘制在图片上方
        var avatar = ImageUtils.GetAvatar(MemberUin, AvatarSize);

        image.Mutate(ctx =>
        {

            //绘制背景卡片，增加边距，并确保不盖住头像
            //int cardMargin = CardTopPadding;
            //int cardTopMargin = TopMargin + AvatarTop + AvatarSize + AvatarBottom;
            ctx.DrawRoundedRectangle(CardPadding, CardTopPadding, totalWidth - 2 * CardPadding, totalHeight - CardTopPadding * 2, 60, CardColor);
            DrawAvatar(ctx, avatar, totalWidth);
            foreach (var cell in builder.MenuCells)
            {
                DrawMenuCell(ctx, cell, ref currentX, ref currentY, ref currentLineHeight, ref cellCountInLine, font, smallFont);
            }

            // 绘制签名
            var signatureOptions = new TextOptions(signatureFont) { WrappingLength = totalWidth };
            var signatureSize = TextMeasurer.MeasureSize(Signature, signatureOptions);
            float signatureX = (totalWidth - signatureSize.Width) / 2;
            float signatureY = currentY + currentLineHeight + 60; // 60 是签名与单元格之间的距离
            ctx.DrawText(Signature, signatureFont, Color.Gray, new PointF(signatureX, signatureY));
        });

        return image.ToBytesAsync().Result;
    }

    private void DrawAvatar(IImageProcessingContext ctx, Image<Rgba32> avatar, int totalWidth)
    {
        ctx.DrawImage(avatar, new Point((totalWidth - AvatarSize) / 2, AvatarTop + CardTopPadding), 1f);
    }

    private void DrawMenuCell(IImageProcessingContext ctx, MenuCell cell, ref int currentX, ref int currentY, ref int currentLineHeight, ref int cellCountInLine, Font font, Font smallFont)
    {
        var textOptions = new TextOptions(font)
        {
            WrappingLength = CellWidth
        };
        var textSize = TextMeasurer.MeasureSize(cell.Text, textOptions);
        var smallTextOptions = new TextOptions(smallFont)
        {
            WrappingLength = CellWidth
        };
        var smallTextSize = TextMeasurer.MeasureSize(cell.SmallText, smallTextOptions);

        int cellHeight = (int)(textSize.Height + smallTextSize.Height) + TextCellSpacing * 2 + 8;
        int cellWidth = CellWidth;

        if (cellCountInLine >= LineMaxMenu)
        {
            currentX = Margin + CardPadding;
            currentY += currentLineHeight + CellSpaced;
            currentLineHeight = cellHeight;
            cellCountInLine = 0;
        }
        else
        {
            currentLineHeight = Math.Max(currentLineHeight, cellHeight);
        }

        var textColor = cell.UseColor ? cell.Color : Color.Black;

        // 绘制卡片背景
        ctx.DrawRoundedRectangle(currentX, currentY, cellWidth, currentLineHeight, 30, CardColor);
        ctx.DrawRoundedRectanglePath(currentX, currentY, cellWidth, currentLineHeight, 30, 6, Color.Wheat);

        // 计算文本和说明的总高度
        float totalTextHeight = textSize.Height + smallTextSize.Height;

        // 计算文本和说明的起始位置，使其上下边距一致
        float textY = currentY + (currentLineHeight - totalTextHeight) / 2;
        float smallTextY = textY + textSize.Height + 8; // 调整 smallTextY 位置

        // 计算文本和说明的水平起始位置，使其水平居中
        float textX = currentX + (cellWidth - textSize.Width) / 2;
        float smallTextX = currentX + (cellWidth - smallTextSize.Width) / 2;

        // 绘制文本
        ctx.DrawText(new RichTextOptions(font)
        {
            Origin = new PointF(currentX + cellWidth / 2, textY + TextCellSpacing),
            WrappingLength = CellWidth,
            HorizontalAlignment = HorizontalAlignment.Center,
            VerticalAlignment = VerticalAlignment.Center
        }, cell.Text, textColor);

        ctx.DrawText(new RichTextOptions(smallFont)
        {
            Origin = new PointF(currentX + cellWidth / 2, smallTextY + TextCellSpacing),
            WrappingLength = CellWidth,
            HorizontalAlignment = HorizontalAlignment.Center,
            VerticalAlignment = VerticalAlignment.Center
        }, cell.SmallText, Color.DarkGray);

        currentX += cellWidth + TextCellSpacing;
        cellCountInLine++;
    }


}

